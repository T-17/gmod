--[[
MIT License

Copyright (c) 2016 suun

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

--  ____                         __       _ 
-- |  _ \ _____      _____ _ __ / _|_   _| |
-- | |_) / _ \ \ /\ / / _ \ '__| |_| | | | |
-- |  __/ (_) \ V  V /  __/ |  |  _| |_| | |
-- |_|   \___/ \_/\_/ \___|_|  |_|  \__,_|_|
-- The multi-functional starfall library

local pw = {}

-- OOP: {{{
do
  local function callConstructor(class, obj, ...)
    local meta = getmetatable(class)
    if #meta.__super > 0 then
      if class.superArgs then
        for k, v in ipairs(meta.__super) do
          callConstructor(v, obj, class.superArgs(...))
        end
      else
        for k, v in ipairs(meta.__super) do
          callConstructor(v, obj)
        end
      end
    end
    if class.new then
      class.new(obj, ...)
    end
  end

  local function instantiate(class, ...)
    local cl = setmetatable({}, {
        __index = class
    })
    callConstructor(class, cl, ...)
    return cl
  end

  function pw.class(...)
    local arg = {...}
    local cl = {}
    setmetatable(cl, {
        __index = function(self, key)
          if key ~= "new" then
            local mtb = getmetatable(self)
            for k, v in ipairs(mtb.__super) do
              if v[key] then
                return v[key]
              end
            end
            return nil
          end
        end,
        __super = arg,
        __call = instantiate,
    } )
    return cl
  end
end
-- }}}

-- Anonymous Hooks: {{{
do
	local counter = 1

	function pw.hook(name, callback)
		hook.add(name, "Anonymous Hook: " .. counter, function()
			callback()
			hook.remove(name, "Anonymous Hook: " .. counter)
		end)
		counter = counter + 1
	end
end
-- }}}

-- Networking: {{{
do
	pw.net = {}

	local net, fastlz, von = net, fastlz, von
	-- Constants
	local PW_NET_MSG = "P"

	local nameToID = {}
	local IDToName = {}

	-- Call this on server and client!
	function pw.net.register(names)
		for _, name in pairs(names) do
			local id = #IDToName+1
			IDToName[id] = name
			nameToID[name] = id
		end
	end

	function pw.net.msg(name, callback, ply)
		local id = nameToID[name]
		if not id then throw("Unregistered message: " .. name) end
		
		if CLIENT or pw.clientLoaded then
			net.start(PW_NET_MSG)
			net.writeUInt(id, 16)
			if callback then callback() end
			net.send(ply)
		else
			pw.hook("ClientLoaded", function()
				net.start(PW_NET_MSG)
				net.writeUInt(id, 16)
				if callback then callback() end
				net.send(ply)
			end)
		end
	end

	local callbacks = {}

	function pw.net.onMessage(id, callback)
		callbacks[id] = callback
	end

	hook.add("net", "pw.net", function(name, len, ply)
		if name == PW_NET_MSG then
			local id = net.readUInt(16)
			local name = IDToName[id]
			if not name then
				throw("pw.net: Unregistered ID: " .. id)
			end

			if callbacks[name] then
				callbacks[name](len, ply)
			end
		end
	end)

	-- Other net functions
	pw.net.writeString = function(s)
		-- Don't compress if it is smaller than 20 characters
		if #s < 20 then
			net.writeBit(false)
			net.writeString(s)
		else
			net.writeBit(true)
			local data = fastlz.compress(s)
			net.writeUInt(#data, 32)
			net.writeData(data, #data)
		end
	end

	pw.net.readString = function()
		local isCompressed = net.readBit() ~= 0
		if isCompressed then
			local size = net.readUInt(32)
			local data = net.readData(size)
			return fastlz.decompress(data)
		else
			return net.readString()
		end
	end

	pw.net.writeUInt = net.writeUInt
	pw.net.writeInt  = net.writeInt
	pw.net.writeFloat = net.writeFloat
	pw.net.writeTable = function(tbl)
		pw.net.writeString(von.serialize(tbl))
	end
	pw.net.readTable = function()
		return von.deserialize(pw.net.readString)
	end
	-- TODO: Add rest

end
-- }}}

-- Global variables: {{{
do
	pw.net.register {
		"newGlobal",
		"setGlobal",
	}

	local IDToName = {}
	local nameToID = {}
	local nameToType = {}


	local typeToID = {
		["nil"]    = 0,
		["number"] = 1,
		["string"] = 2,
		["table"]  = 3,
	}
	local IDToType = {}

	for k, v in pairs(typeToID) do
		IDToType[v] = k
	end

	local sendFuncs = {
		["number"] = net.writeFloat,
		["string"] = pw.net.writeString,
	}

	local receiveFuncs = {
		["number"] = net.readFloat,
		["string"] = pw.net.readString,
	}


	local globals = {} 

	local function setGlobal(_, name, value)
		-- New value -> register
		if not globals[name] then
			local id = #IDToName + 1
			IDToName[id] = name
			nameToID[name] = id

			local typeID = typeToID[type(value)]
			if not typeID then throw("Unsupported type: " .. type(value)) end

			pw.net.msg("newGlobal", function()
				net.writeUInt(id, 32)
				net.writeUInt(typeID, 16)
				pw.net.writeString(name)
			end)
		end
		local id = nameToID[name]

		globals[name] = value
		pw.net.msg("setGlobal", function()
			net.writeUInt(id, 32)
			sendFuncs[type(value)](value)
		end)
	end

	local function getGlobal(_, name)
		return globals[name]
	end

	pw.globals = setmetatable({}, {
		-- set a global value
		__newindex = setGlobal,

		-- read a global value
		__index = getGlobal,
	})

	pw.net.onMessage("newGlobal", function()
		local id = net.readUInt(32)
		local type = IDToType[net.readUInt(16)]
		local name = pw.net.readString()

		nameToID[name] = id
		IDToName[id] = name
		nameToType[name] = type
	end)

	pw.net.onMessage("setGlobal", function()
		local id = net.readUInt(32)
		local name = IDToName[id]
		local type = nameToType[name]
		globals[name] = receiveFuncs[type]()
	end)
end
-- }}}

-- I/O: {{{
if SERVER then
	local wire = wire

	do -- Wire I/O Control
		local function getNamesTypes(t)
			local names, types = {}, {}
			local i = 1
			for k, v in pairs(t) do
				names[i] = k 
				types[i] = v
				i = i + 1
			end

			return names, types
		end
		-- Format: {
		-- 	[name] = type,
		-- }
		function pw.setInputs(tbl)
			wire.adjustInputs(getNamesTypes(tbl))
		end

		function pw.setOutputs(tbl)
			wire.adjustOutputs(getNamesTypes(tbl))
		end
	end

	do -- Wire I/O Cache
		pw.inputs = {}

		hook.add("input", "powerful cache", function(name, value)
			pw.inputs[name] = value
		end)
	end
end
-- }}}

-- Utility: {{{

-- pw.setName - setName's serverside version
pw.net.register {
	"setName",
}
if SERVER then
	function pw.setName(s)
		pw.net.msg("setName", function()
			pw.net.writeString(s)
		end)
	end
else
	pw.net.onMessage("setName", function()
		setName(pw.net.readString())
	end)
end

do
	local Angle, Vector = Angle, Vector
	local random = math.random
	function pw.randVector(min, max)
		min = min or -1
		max = max or 1
		return Vector(random(min, max), random(min, max), random(min, max))
	end

	function pw.randAngle(min, max)
		min = min or -180
		max = max or 180
		return Angle(random(min, max), random(min, max), random(min, max))
	end
end

-- pw.findPlayerByName(s)
do
	local find, pairs = find, pairs

	function pw.findPlayerByName(s)
		local players = find.allPlayers()
		s = s:lower()
		for _, p in pairs(players) do
			if p:getName():lower():find(s) then
				return p
			end
		end
	end
end

-- pw.print(s)
-- Prints to owner, even if called on other client
pw.net.register {
	"printServer",
}
if SERVER then
	local net = net
	pw.net.onMessage("pw.printServer", function()
		print(pw.net.readString())
	end)

	function pw.print(s)
		print(s)
	end
elseif CLIENT then
	if player() == owner() then 
		-- print() works on owner's client so skip networking
		function pw.print(s)
			print(s)
		end
	else
		function pw.print(s)
			pw.net.msg("pw.printServer", function()
				pw.net.writeString(s)
			end)
		end
	end
end

do
	local format = string.format
	-- returns formatted float; strips off extra 0's and .'s
	function pw.niceFloat(n)
		n = string.format("%f", n)
		n = n:TrimRight("0")
		n = n:TrimRight(".")

		return n
	end
end

do
	local clock = os.clock
	
	function pw.measure(func)
		local t = clock()
		func()
		return clock() - t
	end
end

-- Client info on server:
-- pw.clientLoaded on server
-- "ClientLoaded" hook gets called on server
pw.net.register {
	"clientLoaded"
}
if SERVER then
	pw.clientLoaded = false

	pw.net.onMessage("clientLoaded", function()
		pw.clientLoaded = true
		hook.run("ClientLoaded")
	end)
else
	if player() == owner() then
		pw.net.msg("clientLoaded")
	end
end
-- }}}

return pw

-- vim: ft=lua
