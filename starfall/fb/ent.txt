--  _____           _   _           _ _ 
-- |  ___|__   ___ | |_| |__   __ _| | |
-- | |_ / _ \ / _ \| __| '_ \ / _` | | |
-- |  _| (_) | (_) | |_| |_) | (_| | | |
-- |_|  \___/ \___/ \__|_.__/ \__,_|_|_|

local trace = trace.trace
local clamp = math.clamp
local random = math.random
local IN_KEY = IN_KEY

Football = pw.class()

function Football:doShot(ply, name)
    local config = self.config[name]
    if not config then return end
    local vel = self.e:getPos() - (ply:getPos()+Vector(0,0,5))
    if config.normal and config.aimed then
        vel = vel:getNormalized() * config.normal + ply:getAimVector() * config.aimed
    elseif config.normal then
        vel = vel:getNormalized() * config.normal
    elseif config.aimed then
        vel = ply:getAimVector() * config.aimed
    end
    if config.z then
        vel.z = clamp(vel.z, config.z.min, config.z.max)
    end
    if config.trail then
        self.e:setTrails(10, 1, 5, config.trail.mat, config.trail.color)
    end
    self.e:setVelocity(vel)
end

function Football:isHead(ply)
    local lPos = ply:worldToLocal(self.e:getPos())
    return ((not ply:isCrouching()) and lPos.z > 50) or (ply:isCrouching() and lPos.z > 30)
end


function Football:new(pos, config)
    self.config = config
    
    self.e = prop.create(pos, Angle(0,0,0), self.config.model, false)
    if self.config.color then
        self.e:setColor(self.config.color)
    end
    self.e:setFrozen(false)
    
    if self.config.layouts then
        for k, v in pairs(self.config.layouts[random(1, #self.config.layouts)]) do
            self.e:setSubMaterial(k, v)
        end
    end
    self.e:addCollisionListener(function(data)
        local e = data.HitEntity
        local ply
        if e and e:isValid() and e:isPlayer() then
            ply = e
        end

        if timer.getTimersLeft() >= 1 then
            timer.simple(1, function()
                self.e:removeTrails()
            end)
        end
        
        if ply then
            self.e:removeTrails()
            if ply:keyDown(IN_KEY.RELOAD) then
                self:doShot(ply, "stopShot")
            elseif self:isHead(ply) then
                self:doShot(ply, "headShot")
            elseif ply:keyDown(IN_KEY.USE) then
                local onGround = trace(ply:getPos(),ply:getPos()-Vector(0,0,10)).Hit
                if onGround then
                    self:doShot(ply, "strongShot")
                else
                    self:doShot(ply, "superShot")
                end
                self.isShooting = true
            elseif ply:keyDown(IN_KEY.WALK) then
                self:doShot(ply, "tallShot")
            elseif ply:keyDown(IN_KEY.DUCK) then
                self:doShot(ply, "aimedShot")
                self.isShooting = true
            elseif ply:keyDown(IN_KEY.RUN) then
                self:doShot(ply, "runShot")
            else
                self:doShot(ply, "normalShot")
            end
            self.e:emitSound(self.config.sounds[random(1, #self.config.sounds)], 75, 100)
        end    
    end )
    chip():emitSound("coach/coach_go_here.wav")
end

-- vim: ft=lua tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
